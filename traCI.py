import os, sys
import random
from typing import List, Dict

import numpy as np
import traci
import sumolib

from math_utils import euclidean_distance
from sumo_visualizer import SumoVisualizer
from vehicle_info import Vehicle


def get_seen_vehicles(cv2x_vehicles, non_cv2x_vehicles, buildings):
    """
    1- Use angle of view to get all vehicles in range
    2- Use vector from each cv2x_vehicle to all non-cv2x-vehicles
    3- if this vector passes through building or through 60% of the mid-vehicle or the distance is > 70m
        then skip this non-cv2x
    4- else, add this non-cv2x to the seen vehicle of this specific cv2x-vehicle
    """
    cv2x_vehicles_perception = {}

    for cv2x_vehicle in cv2x_vehicles:
        for non_cv2x_vehicle in non_cv2x_vehicles:
            if cv2x_vehicle.can_see_vehicle(non_cv2x_vehicle):
                is_occluded = False

                for building in buildings:
                    if cv2x_vehicle.building_in_sight(building.shape, non_cv2x_vehicle):
                        is_occluded = True
                        break

                if not is_occluded:
                    for non_cv2x_obstacle_vehicle in non_cv2x_vehicles:
                        if non_cv2x_vehicle.vehicle_id != non_cv2x_obstacle_vehicle.vehicle_id:
                            if cv2x_vehicle.vehicle_in_sight(non_cv2x_obstacle_vehicle, non_cv2x_vehicle):
                                is_occluded = True
                                break

                if not is_occluded:
                    if cv2x_vehicle.vehicle_id in cv2x_vehicles_perception:
                        cv2x_vehicles_perception[cv2x_vehicle.vehicle_id].append(non_cv2x_vehicle.vehicle_id)
                    else:
                        cv2x_vehicles_perception[cv2x_vehicle.vehicle_id] = [non_cv2x_vehicle.vehicle_id]

    return cv2x_vehicles_perception


if 'SUMO_HOME' in os.environ:
    tools = os.path.join(os.environ['SUMO_HOME'], 'tools')
    sys.path.append(tools)
else:
    sys.exit("please declare environment variable 'SUMO_HOME'")


def get_interest_cv2x_in_vehicle(cv2x_vehicle, non_cv2x_vehicle, p):
    # Traj = the trajectory of the cv2x vehicle.
    # Assume max velocity of cv2x = 40 m/s. Therefore, Traj for 5 sec has a max of 200m travel distance

    # Get trajectory from="noncv2x_vehicle" to differnet segment of "Traj".
    # Let noncv2x_vehicle speed = max(its own speed, 40 m/s),
    #           calculate the time taken to reach different segemnts of "Traj"
    #           ignore any time above 5 sec.
    #           minT = minimum time taken to reach one of the Traj segment
    #           p = probability the cv2x seeing the non_cv2x
    #           interest = (1/minT) * (p)
    cv2x_future_edges = cv2x_vehicle.get_future_route()
    min_dist, min_dist_edge = get_shortest_route(non_cv2x_vehicle.get_current_road(), cv2x_future_edges)
    t = 3600 * (min_dist/40000) # get time in seconds for a speed of 40km/h

    if t > 5:
        return 0
    else:
        return p/t


def calculate_scores_per_cv2x(cv2x_perceived_non_cv2x_vehicles,
                              cv2x_vehicles, non_cv2x_vehicles,
                              buildings):
    cv2x_ids = list(cv2x_vehicles.keys())
    scores_per_cv2x = {}

    for sender_cv2x_id, perceived_non_cv2x_ids in cv2x_perceived_non_cv2x_vehicles.items():
        sender_cv2x_vehicle = cv2x_vehicles[sender_cv2x_id]
        other_cv2x_ids = list(set(cv2x_ids) - set([sender_cv2x_id]))
        scores = []

        for receiver_cv2x_id in other_cv2x_ids:
            for perceived_non_cv2x_id in perceived_non_cv2x_ids:
                remaining_perceived_non_cv2x_ids = list(set(perceived_non_cv2x_ids)-set([perceived_non_cv2x_id]))
                remaining_perceived_non_cv2x_vehicles = [non_cv2x_vehicles[i] for i in remaining_perceived_non_cv2x_ids]

                receiver_cv2x_vehicle = cv2x_vehicles[receiver_cv2x_id]
                perceived_non_cv2x_vehicle = non_cv2x_vehicles[perceived_non_cv2x_id]

                p = sender_cv2x_vehicle.get_probability_cv2x_sees_non_cv2x(receiver_cv2x_vehicle, perceived_non_cv2x_vehicle,
                                                                            remaining_perceived_non_cv2x_vehicles, buildings)
                if p == 0:
                    scores.append((receiver_cv2x_id,0))
                else:
                    scores.append((receiver_cv2x_id,
                                   get_interest_cv2x_in_vehicle(receiver_cv2x_vehicle, perceived_non_cv2x_vehicle, p)))

        scores_per_cv2x[sender_cv2x_id] = scores
    return scores_per_cv2x


def calculate_highest_score_per_cv2x(scores_per_cv2x):
    pass


def select_max_scores(score_per_cv2x):
    pass


def get_shortest_route(source, list_destination_edges):
    min_distance = 100000000000
    min_dist_destination = None

    for destination in list_destination_edges:
        route = traci.simulation.findRoute(source, destination, "")

        if route.length < min_distance:
            min_distance = route.length
            min_dist_destination = destination

    # route_distance = 0

    # for edge_id in route.edges:
    #     points = net.getEdge(edge_id).getShape()
    #
    #     for i in range(1, len(points)):
    #         d = euclidean_distance(points[i], points[i-1])
    #         route_distance += d

    # return route_distance
    return min_distance, min_dist_destination


def run(hyper_params):
    sumoBinary = "/usr/bin/sumo-gui"
    sumoCmd = [sumoBinary, "-c", hyper_params['scenario_map']]
    traci.start(sumoCmd)
    step = 0
    # print(np.random.get_state())
    viz = SumoVisualizer(hyper_params)

    # np.random.set_state(('MT19937', np.array(
    #     [865610089, 4198412327, 1133904934, 3363913031, 1893987437, 1996961430, 2137660194, 4006379805, 327501811,
    #      3815180377, 2376961818, 1772596801, 944851375, 548165178, 2270277342, 2706830503, 2617350599, 3006002245,
    #      4181908613, 4261260859, 196567961, 79925413, 1746676643, 3727890402, 446599880, 472149946, 602121443,
    #      1252520769, 3124639840, 960294301, 93106996, 4219518374, 3634697492, 2588039451, 256080228, 2268737323,
    #      1055728372, 3847679623, 3511698904, 1116559708, 594039902, 489058063, 2615744158, 966017957, 1639799043,
    #      3539863208, 1224214071, 2868905713, 2448144826, 54200725, 3880860801, 908442676, 2618445308, 52846167,
    #      1386154935, 3207309101, 2330867320, 2960502955, 3938151340, 151650619, 2624202531, 2646119385, 109960821,
    #      3504847553, 3317187529, 3013593809, 2502102980, 1669317305, 1047623551, 1655241401, 3744871465, 2612091319,
    #      3971358871, 1577372346, 3594399454, 3736935771, 1282729693, 1782438699, 3658110162, 2659314343, 2337318849,
    #      1431664748, 3282596920, 3354085882, 1345591885, 3891976732, 2537838203, 2761318727, 1611656718, 2028427822,
    #      2658858746, 2128276284, 893471560, 2456771662, 2969280788, 2893037142, 3783507557, 3256147149, 1124431221,
    #      3549045324, 2897012706, 650124689, 353297105, 1960676108, 942431309, 2197983100, 3512139169, 1443169332,
    #      456721872, 2211534288, 895855146, 2115131363, 644531643, 3971902352, 499605399, 1439288280, 3699198916,
    #      2953171188, 598874906, 151559385, 807412022, 1857305578, 873635973, 2171610262, 4269514597, 1806997634,
    #      4288566577, 3125288046, 1430649012, 1974219618, 3382551341, 4053617755, 3055265346, 2536920176, 3586970963,
    #      1483562603, 3096440366, 2891663973, 1227589276, 167632411, 3352236849, 2655870427, 452224940, 967596125,
    #      1883052332, 3639058569, 2784965432, 3114345392, 379655256, 459290065, 187882586, 850396001, 2437666250,
    #      3437601915, 3045438034, 2403451559, 2360221223, 1347141098, 1381901798, 1115264392, 2514305900, 3581551907,
    #      2538564543, 3982416207, 1726949366, 2815410974, 1647905713, 2540492989, 1584791616, 3616355492, 3096780085,
    #      3793538093, 3349383197, 3628279573, 3541096200, 3112902061, 4268274489, 3228944908, 3439480837, 140465049,
    #      378420151, 1808755134, 153034551, 224550067, 4170141977, 1309950922, 1913995221, 4173703459, 2101782232,
    #      112811992, 2900060916, 1021246255, 2454781217, 710631874, 155465891, 2359784630, 1820467340, 3404721193,
    #      3878995755, 1732652352, 1613438685, 2821854604, 4046895318, 3040803544, 957218163, 3736380066, 4160512548,
    #      4167939147, 3727815799, 723388656, 2829643832, 2752587264, 3631071427, 3112604343, 2252461182, 874683428,
    #      4218234299, 2052939156, 1400974294, 2315572194, 4167567201, 3306426421, 178570315, 2772473702, 557800462,
    #      2338093906, 2310489360, 422675005, 3272582513, 255415318, 1779656839, 2342722311, 1169245775, 2376160361,
    #      3309035991, 435267994, 2880641146, 3582566481, 2468985197, 3748054866, 583549857, 2288704898, 3500457848,
    #      1784161716, 3857431810, 77325300, 3344879869, 2974543695, 4116508514, 390413005, 1156532212, 108876854,
    #      1163545427, 1294647525, 2831875758, 1559207291, 2679998804, 1381094830, 1532202671, 3463758392, 4029041496,
    #      1587150946, 1903716091, 4089424780, 2585245417, 3361809278, 2091211145, 1275891495, 2037123058, 47778262,
    #      3435358992, 2554772786, 1443262264, 3005307038, 2203410249, 2918930007, 2427259027, 601368928, 3676804292,
    #      3174613803, 3493091549, 3739830369, 309175649, 530613500, 4119839494, 1725398296, 3322364404, 707982001,
    #      146312273, 3388443231, 2839320279, 3269194071, 1039635849, 297872110, 2340924819, 50194958, 490316743,
    #      1414541647, 3351664509, 1917226925, 2637534507, 189926538, 1350448570, 1467169223, 1041466234, 2143971106,
    #      114222738, 2964357084, 1750862178, 1472205176, 186851072, 3970928892, 712888899, 1294681204, 862541298,
    #      1425229039, 2316903696, 440267557, 1187903230, 1514904159, 1164665474, 1005294868, 1964318569, 2549181930,
    #      2558634239, 470774304, 3396558448, 1703548654, 1036340539, 4107599819, 4044988770, 771006856, 2956373887,
    #      1458165990, 1162832075, 2166940171, 2004251039, 1688776640, 3099480565, 3246001281, 2829082185, 1688088305,
    #      2880030666, 3350103018, 2462446331, 1084564986, 1377172889, 1623897025, 1846372228, 3531521969, 3540398965,
    #      2536650801, 242386075, 377360129, 2343518404, 1105021393, 2106422308, 4218078277, 2602643298, 2276004365,
    #      2097808116, 3661015038, 2948422225, 1920365853, 3417060965, 2861684894, 3684690651, 2152111269, 629697846,
    #      3761517020, 3347610243, 496337785, 2257632377, 237966656, 2389866246, 1231067236, 3644728535, 2749860463,
    #      2201576738, 1036386957, 774434806, 3140524840, 3053436236, 3267859027, 2199777780, 1031827583, 948274809,
    #      3825462095, 713893924, 1117745767, 3270178750, 947715224, 446016956, 517021646, 2013697021, 3090527177,
    #      2055749569, 2966773, 2829646252, 193816057, 2714726694, 976997971, 2346520342, 2980845312, 3409174285,
    #      747007465, 2178103527, 1692511781, 1523800045, 3277664213, 3672507197, 3203331429, 3266977764, 3593567785,
    #      1975844064, 3175554323, 4146285002, 1672623053, 4105423448, 2666608765, 2933528435, 3240631303, 1374558509,
    #      297642062, 3723805405, 1819521388, 1938118718, 2559017915, 4061149145, 658286820, 3588478192, 258422532,
    #      3664752902, 4094766382, 2820573333, 3953404447, 1080429711, 1781189266, 3132762702, 511514873, 1760007438,
    #      3390494366, 2153227291, 3804093046, 1660953566, 2367035865, 2054945439, 1842714902, 24655505, 2514939161,
    #      339641154, 1551289530, 1692095653, 2994548613, 2157355656, 2848745039, 2138602232, 2991531803, 3889455629,
    #      192795806, 3761600458, 198880974, 147818001, 4071591291, 1655085718, 3297965041, 1460862620, 3563554596,
    #      1880545518, 660070499, 3103660128, 1164792750, 3989811384, 1303229742, 4219071520, 4157692914, 4253640193,
    #      2347321514, 273699470, 1229361490, 1112728386, 583646845, 3907496169, 3290591030, 2041361460, 1805364472,
    #      3349259112, 1870062626, 3931643160, 1089568037, 3111441530, 1910207727, 2158648642, 3971484972, 254902895,
    #      2673660936, 3425532682, 3597820870, 673956005, 2128005141, 3481551292, 584857192, 91232622, 1287841494,
    #      4277614615, 3736442209, 1724759060, 3550256488, 199243560, 2346489288, 588097540, 2982629715, 3072879791,
    #      3157474439, 1195834312, 4237114446, 2463795029, 1158581741, 428909454, 2169399578, 3801044312, 2898059071,
    #      1425331450, 4187848361, 335436886, 1474906922, 13353749, 2937681690, 4122441991, 2698251872, 1921337308,
    #      4033964850, 1347029477, 1316929693, 1008151689, 1107012408, 3722643651, 276510767, 4224038731, 1282743894,
    #      3202441790, 183829857, 4293097021, 1298132380, 2686116234, 1738202926, 3776706325, 489859878, 1117248143,
    #      938828694, 705167809, 3571325277, 3416549555, 2764180758, 1729112265, 1837484390, 805487037, 714448854,
    #      1208393103, 1020799579, 1357698204, 3330873149, 1172498619, 1023198696, 1172085939, 1998616899, 2608278377,
    #      2812205706, 3296415180, 441444428, 4147300331, 1019350838, 344808389, 805405122, 470655187, 41783785,
    #      1196342601, 3282177814, 3165005864, 1280927565, 1310333890, 686769164, 2772790107, 2228017487, 1070243997,
    #      3905042326, 381491891, 2792592455, 169791286, 1628535813, 2077127952, 1282005098, 2836319294, 2440268304,
    #      2892751845, 1153089529, 4215676265, 2773313145, 90242601, 769851680, 1180722112, 3782487031, 1092596806,
    #      3663960471, 3432564679, 3034272847, 1488021615, 703005220, 571536384, 2685851810, 2390542757, 1779261646,
    #      787238516, 974950271, 1461182985, 92911325, 560087797, 659679365, 1577492191, 103023888, 1700994443,
    #      4033001505, 2338101717, 3125582762], dtype="uint32"), 1, 0, 0.0))
    # print(random.getstate())
    # random.setstate((3,
    #                  (2147483648, 2077741999, 3155082505, 2565695669, 593782799, 2360061358, 315583993, 469139275, 98034818, 2070589442, 823515059, 3702389658, 1252510533, 3007523348, 3976153170, 306312739, 1617062903, 2097804242, 3060939982, 239606825, 780305416, 1338477389, 2685738698, 4188493264, 3119561798, 3925306597, 2059120320, 3025386063, 1533109627, 3011197088, 3031261413, 1307539472, 3943190400, 1349811228, 529011511, 1582427363, 206345297, 1636387402, 2671912330, 1067127326, 2416860448, 2475695138, 193948324, 3485346964, 3272233890, 3296684156, 3970437230, 305017098, 1936074758, 3465250442, 2408156619, 1064466163, 3763221653, 1736226050, 1965853927, 3078097646, 817007316, 4235320145, 2372517713, 1674131752, 276066263, 2669964808, 3596817474, 2628279523, 978981533, 636307333, 2694740322, 2072996874, 1995056069, 2103668363, 382268014, 3534082669, 1261102178, 2251309670, 2836788218, 2119536188, 2734456252, 556518391, 507798057, 3914014546, 3493241045, 2039555916, 2226332668, 2350577043, 1272081096, 1269089732, 1611337523, 2468533775, 1029365685, 2704246422, 1880506195, 1239733509, 3666527673, 3902493202, 2859566990, 3764608043, 3609433164, 2075066027, 2406191355, 3853577471, 3791366406, 3580901951, 2409641673, 3060058070, 3939594380, 779789301, 4119262920, 2248797137, 2977295514, 425632008, 3723577707, 1903239736, 1478163542, 1311496901, 109991435, 1642384057, 2371276545, 2344434747, 1058213686, 2444238905, 3265801185, 1963164390, 1319118797, 2562474452, 3608838432, 1040369274, 2856744092, 247753863, 3615635338, 1502236357, 4095650432, 3569273997, 3994017731, 1746486271, 1391851844, 3087058698, 2682738379, 2915828312, 2605251390, 3032145754, 3535618307, 3995599349, 3158549215, 2060312198, 4057995405, 3319484033, 4152684598, 868597703, 3451471517, 1474633510, 23127897, 2814816328, 1139162205, 13043382, 191539686, 307153331, 2647973139, 2530860524, 2971771701, 164845678, 570089623, 2021493108, 1130968016, 1971800974, 2227168656, 3905325579, 1396662183, 947305343, 3923780508, 2919012444, 876701783, 1761745122, 292161893, 3324223381, 150613216, 3094846437, 3874691123, 3814111416, 3726785748, 3899041707, 1527681064, 1294980365, 971542585, 3101917333, 2505422334, 2552301088, 150162163, 55464548, 591330695, 1151473792, 2103823836, 1179375414, 4191842496, 3635654529, 3873892166, 3095823924, 3283596247, 3987876094, 1331076747, 3596430300, 945671772, 2747919692, 3426200091, 2228812396, 3533974721, 2462552714, 3254260110, 1738462096, 1537811270, 2263745540, 2490344570, 732989752, 1157355693, 4005044461, 3872585769, 3373172520, 1348175216, 1387849380, 244352807, 917652578, 1562397746, 700796119, 2552384678, 1737052516, 3469773747, 2607214796, 4070403743, 2171659101, 142481033, 2950651534, 2160129612, 384438046, 2651080098, 2543593341, 2227107501, 84226788, 3361780322, 1425118438, 2955812948, 885573883, 2610647110, 3165003749, 2080812562, 141571660, 310294121, 1898732572, 599647216, 469671011, 3275738331, 4105193868, 1801253606, 1493618091, 2523104926, 1407088965, 690930837, 3981581053, 3444522602, 3251228161, 189660067, 1740293671, 2525607852, 50856296, 984805355, 289923762, 4030292070, 1794430153, 3110451899, 2829357531, 3566321976, 2340346336, 1250491448, 1991476159, 1794291644, 1883418892, 3201698589, 555135020, 1368867000, 1663800334, 1937770674, 2922285892, 3075181227, 987149150, 2987541683, 3464200800, 2762918557, 3470021373, 2349221885, 3380806162, 2959380882, 128652095, 3819387196, 3261459126, 2219640208, 1531177392, 2345917301, 1208107689, 512865865, 3618450953, 424961829, 2768477245, 3709550681, 640568109, 3813966832, 953030828, 765318788, 2904264097, 1354926761, 884241213, 1229046215, 1854696974, 4272479409, 2299185189, 1364898196, 722055717, 1057216602, 3169244694, 1029024886, 534008814, 2311329851, 2264692901, 565976703, 2192882631, 1494700092, 1944042990, 126992480, 3598329106, 3417285105, 853117901, 3556942845, 3676104533, 897403185, 3535476837, 2399312572, 1594774957, 355538361, 2167910265, 177385160, 3250875465, 2755220037, 2744327268, 2211809247, 2784655640, 2373614344, 4007787200, 1463608991, 3949490799, 1794123382, 1160043698, 2115030594, 1316073017, 3144847840, 1314842078, 156433396, 925395970, 901641474, 617432936, 3398712346, 2311642645, 147747721, 860063189, 3534845963, 3965399999, 363789926, 681743389, 2938589542, 1710965652, 91566212, 1091287316, 2771289874, 3001173265, 1884574565, 926229420, 3812075430, 1834864908, 1294768147, 3104010329, 3526831660, 2856022958, 328517499, 867364004, 3515716478, 120591270, 231979134, 3292831149, 41509162, 2116219754, 489541378, 1779389927, 1140193801, 4106303570, 581401509, 2515183009, 1754930794, 707161041, 1290566090, 458346700, 2443623572, 1876043824, 3281222234, 3942565292, 3358618871, 2805112566, 3271624477, 19521337, 1392950445, 2411410589, 546873882, 532101312, 922052211, 3498527580, 128687559, 2675978970, 330449826, 611111007, 1513547040, 1294535185, 3297306896, 1603293992, 3298493109, 1599206889, 3361946929, 3475322013, 3314399920, 1125663304, 614483941, 1134812220, 3880760289, 3453368874, 2744060081, 2280797456, 3735923413, 1592668688, 3875454125, 848173886, 2058177350, 473493580, 2938920012, 1317141630, 1783142649, 3447368870, 1739230943, 1626899978, 4010750482, 2216524916, 2157774835, 2636643126, 3359906483, 3771272163, 1797338803, 4045219196, 2381518962, 2535424240, 154090764, 396250505, 3510701120, 4283840100, 1668784482, 2472308220, 3376892690, 1843918679, 1978125956, 1439170821, 1900549850, 2605490363, 265817185, 3160079342, 3589373734, 3427120209, 1273895384, 1302391410, 4274059260, 425980478, 1288929560, 1198765632, 4162630860, 1573151294, 1658030448, 248402604, 613021503, 2736096401, 2048842235, 1846496034, 2431200030, 761609284, 2608623478, 1789308685, 4027426570, 1693650238, 1878190187, 2882696310, 4108630397, 2536458785, 576961898, 1194280455, 2817767674, 3628239180, 3765852650, 75340335, 580734087, 3786979645, 2838721500, 1249640597, 2928735880, 519838555, 20966742, 2931262362, 1430872295, 2034063035, 982372620, 2675814183, 2950673018, 1734555584, 438673776, 2641741424, 4252813616, 1438058281, 1400687560, 4243560026, 3442066620, 3050902686, 2993893086, 3544559686, 1522161851, 1582116999, 2000629987, 1056627765, 3362247356, 2930190216, 535624675, 77130092, 746645957, 1804622075, 1354750697, 685783033, 3376681410, 1605818174, 2380251500, 956585896, 3383096836, 3953430438, 2351245061, 317964650, 12476935, 3310077669, 1559447050, 1439891330, 1179529596, 1300097328, 2207670887, 1270335219, 3477746337, 2152135111, 190956500, 3809294528, 1124925003, 339921653, 3158520491, 4002467115, 957271052, 1159912861, 3011106321, 89155017, 1229685208, 3000773302, 3408159735, 2199600627, 3547051621, 106987447, 3178092279, 1489205399, 778512654, 2457347439, 1611297003, 1245469170, 804824888, 485431825, 1943449015, 2295177717, 1167169152, 2257935972, 1989268281, 1325520532, 4004119942, 916462198, 702072206, 1704006748, 2864006835, 2015753642, 2569096235, 2395102497, 1612398529, 1433989857, 346039185, 595239924, 913144741, 4162606129, 2819565660, 2093417690, 3275293262, 1146558703, 2961825512, 2049431748, 3002670776, 462885878, 4267261102, 2536470368, 1549655025, 1291710787, 3279229401, 2535545174, 1392185936, 1485540050, 1928708100, 4003480699, 3758793265, 1137706732, 2972121302, 2389256132, 668316634, 2670557875, 2159523427, 724892267, 2952524206, 2120816362, 624), None))

    vehicles = {}
    # net = sumolib.net.readNet(hyper_params['scenario_path'])
    buildings = sumolib.shapes.polygon.read(hyper_params['scenario_polys'])

    while step < 100000:
        step += 1
        print("Step:", step)
        # if traci.inductionloop.getLastStepVehicleNumber("1") > 0:
        #     traci.trafficlight.setRedYellowGreenState("0", "GrGr")

        traci.simulationStep()
        traci.route.getIDList()

        # 1) Get All Vehicles with Wireless
        vehicle_ids = traci.vehicle.getIDList()
        # print(vehicle_list)

        for vid in vehicle_ids:
            v_found = False

            for vehicle_id, vehicle in vehicles.items():
                if vehicle_id == vid:
                    v_road_id = traci.vehicle.getRoadID(vid)
                    vehicle.update_latest_edge_road(v_road_id)
                    v_found = True

            if not v_found:
                vehicles[vid] = Vehicle(vehicle_id=vid, hyper_params=hyper_params)

        need_to_remove = set(vehicles.keys()) - set(vehicle_ids)

        for vid in need_to_remove:
            vehicles.pop(vid)

        if len(vehicle_ids) == 0:
            break
        else:
            snapshot = False
            if len(vehicle_ids) >= 50:
                if np.random.random() > 0.5:
                    snapshot = True

        print("=============================================================")

        if not snapshot:
            continue

        print(vehicles.keys())
        viz.draw_vehicles(vehicles.values())

        cv2x_len = int(hyper_params["cv2x_N"] * len(vehicle_ids))
        cv2x_vehicles_indexes = random.sample(range(len(vehicle_ids)), cv2x_len)
        non_cv2x_vehicles_indexes = list(set(range(len(vehicle_ids))) - set(cv2x_vehicles_indexes))
        # Transform indexes into IDs and vehicles
        cv2x_vehicles = {vehicle_ids[index]:vehicles[vehicle_ids[index]] for index in cv2x_vehicles_indexes}
        non_cv2x_vehicles = {vehicle_ids[index]:vehicles[vehicle_ids[index]] for index in non_cv2x_vehicles_indexes}

        for _, vehicle in cv2x_vehicles.items():
            viz.draw_vehicle_perception(vehicle, (185, 218, 255))

        # 2) Get seen non-cv2x vehicles by each cv2x_vehicle
        cv2x_perceived_non_cv2x_vehicles = get_seen_vehicles(cv2x_vehicles.values(), non_cv2x_vehicles.values(), buildings)

        for cv2x_id, non_cv2x_ids in cv2x_perceived_non_cv2x_vehicles.items():
            cv2x_veh = vehicles[cv2x_id]
            cv2x_non_vehs = [vehicles[id] for id in non_cv2x_ids]
            for vehicle in cv2x_non_vehs:
                viz.draw_vehicle_body(vehicle, color=(0, 0, 128))

        # 3) Solve which info to send to base station
        # 3.1) Calculate required information
        scores_per_cv2x = calculate_scores_per_cv2x(cv2x_perceived_non_cv2x_vehicles, cv2x_vehicles, non_cv2x_vehicles,
                                                    buildings)

        # 3.2) Get Highest Score for each cv2x vehicle
        # score_per_cv2x = [scores[np.argmax(scores)], np.armax(scores) for cv2x, scores in scores_per_cv2x.items()]
        # score_per_cv2x = calculate_highest_score_per_cv2x(scores_per_cv2x)

        # 3.3) Baseline to solve the problem and select which requests to send
        # select_max_scores(score_per_cv2x)

        if snapshot:
            break

    viz.save_img()
    # input("Simulation ended, close GUI?")
    print("Simulation terminated!", scores_per_cv2x.items())
    traci.close()


if __name__ == '__main__':
    hyper_params = {}
    hyper_params['scenario_path'] = "/media/bassel/Entertainment/sumo_traffic/sumo_map/toronto/test.net.xml"
    hyper_params['scenario_map'] = "/media/bassel/Entertainment/sumo_traffic/sumo_map/toronto/net.sumo.cfg"
    hyper_params['scenario_polys'] = "/media/bassel/Entertainment/sumo_traffic/sumo_map/toronto/map.poly.xml"
    hyper_params["cv2x_N"] = 0.25
    hyper_params["fov"] = 60
    hyper_params["view_range"] = 75
    run(hyper_params)
